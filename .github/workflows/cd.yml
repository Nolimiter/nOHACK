name: Continuous Deployment

on:
  push:
    branches: [ main ]

jobs:
  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/hackex-frontend
            ${{ secrets.DOCKERHUB_USERNAME }}/hackex-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hackex-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hackex-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production server
        run: |
          echo "Deploying to production server..."
          # This would typically involve:
          # 1. Connecting to your production server via SSH
          # 2. Pulling the latest Docker images
          # 3. Running docker-compose up -d
          # 4. Running any necessary migrations
          # 
          # Example (you would need to set up SSH keys in GitHub Secrets):
          # ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
          #   "cd /opt/hackex && \
          #    docker-compose pull && \
          #    docker-compose up -d && \
          #    docker system prune -f"